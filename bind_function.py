import json
import logging
import boto3
import time
import os
import asyncio
from datetime import datetime
from telethon import TelegramClient, events, Button
from telethon.tl.types import ChannelParticipantsAdmins
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.errors import FloodWaitError, SessionPasswordNeededError
from botocore.exceptions import ClientError
from telethon.tl.functions.messages import SetTypingRequest
from telethon.tl.types import SendMessageTypingAction
import sib_api_v3_sdk
from sib_api_v3_sdk.rest import ApiException
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO, stream=sys.stdout, format='%(message)s', encoding='utf-8')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram API
API_ID = os.getenv('TELEGRAM_API_ID')
API_HASH = os.getenv('TELEGRAM_API_HASH')
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
BREVO_API_KEY = os.getenv('BREVO_API_KEY')

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
logger.info(f"TELEGRAM_API_ID: {API_ID}, type: {type(API_ID)}")
logger.info(f"TELEGRAM_API_HASH: {API_HASH}, type: {type(API_HASH)}")
logger.info(f"TELEGRAM_BOT_TOKEN: {BOT_TOKEN}, type: {type(BOT_TOKEN)}")
logger.info(f"BREVO_API_KEY: {BREVO_API_KEY}, type: {type(BREVO_API_KEY)}")

if not all([API_ID, API_HASH, BOT_TOKEN]):
    missing_vars = [var for var in ['TELEGRAM_API_ID', 'TELEGRAM_API_HASH', 'TELEGRAM_BOT_TOKEN'] if not os.getenv(var)]
    error_message = f"Missing Telegram API environment variables: {', '.join(missing_vars)}"
    logger.error(error_message)
    raise ValueError(error_message)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
try:
    API_ID = int(API_ID)
except ValueError:
    logger.error(f"API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {API_ID}")
    raise ValueError(f"API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {API_ID}")

if not isinstance(API_HASH, str) or len(API_HASH) != 32:
    logger.error(f"API_HASH –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –¥–ª–∏–Ω–æ–π 32 —Å–∏–º–≤–æ–ª–∞, –ø–æ–ª—É—á–µ–Ω–æ: {API_HASH}")
    raise ValueError(f"API_HASH –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –¥–ª–∏–Ω–æ–π 32 —Å–∏–º–≤–æ–ª–∞, –ø–æ–ª—É—á–µ–Ω–æ: {API_HASH}")

if not isinstance(BOT_TOKEN, str) or not BOT_TOKEN.count(':') == 1:
    logger.error(f"BOT_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—á–∏—Å–ª–æ:—Å—Ç—Ä–æ–∫–∞', –ø–æ–ª—É—á–µ–Ω–æ: {BOT_TOKEN}")
    raise ValueError(f"BOT_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—á–∏—Å–ª–æ:—Å—Ç—Ä–æ–∫–∞', –ø–æ–ª—É—á–µ–Ω–æ: {BOT_TOKEN}")

logger.info("–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è S3 –∏ DynamoDB
S3_CLIENT = boto3.client('s3')
DYNAMODB = boto3.resource('dynamodb', region_name='eu-north-1')
TABLE = DYNAMODB.Table('telegram-subscribers-new')
USERS_TABLE = DYNAMODB.Table('my-telegram-users')  # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Brevo
BREVO_API_KEY = os.getenv('BREVO_API_KEY')  # –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

if not BREVO_API_KEY:
    logger.error("BREVO_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    raise ValueError("BREVO_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
SESSION_FILE = '/tmp/bot_session.session'

async def connect_with_retry(client, max_retries=5):
    for attempt in range(max_retries):
        try:
            await client.connect()
            return
        except FloodWaitError as e:
            if attempt == max_retries - 1:
                raise
            wait_time = e.seconds
            logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            time.sleep(wait_time)

async def initialize_client():
    client = TelegramClient(SESSION_FILE, API_ID, API_HASH)
    if not os.path.exists(SESSION_FILE):
        await connect_with_retry(client)
        await client.sign_in(bot_token=BOT_TOKEN)
        await client.session.save()
    else:
        await client.start(bot_token=BOT_TOKEN)
    return client

async def send_message(client, chat_id, text, buttons=None):
    try:
        if buttons:
            await client.send_message(chat_id, text, buttons=buttons)
        else:
            await client.send_message(chat_id, text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –≤ —á–∞—Ç {chat_id}")
        await asyncio.sleep(1)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise

async def show_typing_animation(client, chat_id, duration=3):
    try:
        await client(SetTypingRequest(peer=chat_id, action=SendMessageTypingAction()))
        await asyncio.sleep(duration)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞: {e}")

async def verify_channel_admin(client, user_id, channel_name):
    try:
        channel = await client.get_entity(channel_name)
        admins = await client(GetParticipantsRequest(
            channel, filter=ChannelParticipantsAdmins(), offset=0, limit=100, hash=0))
        return any(admin.id == user_id for admin in admins.users)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        raise

async def get_subscribers_list(client, channel):
    try:
        channel_entity = await client.get_entity(channel)
        participants = await client.get_participants(channel_entity)
        return {str(p.id): f'{p.first_name or ""} {p.last_name or ""} (@{p.username or "N/A"})' for p in participants}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        raise

async def send_channel_connected_message(client, chat_id, channel_name, subscriber_count, subscriber_list):
    message = (
        f"–•–µ–π-—Ö–µ–π! –ú—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –∫–∞–Ω–∞–ª –∏ —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, "
        f"–∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –∞ –∫—Ç–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞.\n\n"
        f"–ù–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —É —Ç–µ–±—è: {subscriber_count}\n\n"
        f"–í–æ—Ç –∏—Ö —Å–ø–∏—Å–æ–∫:\n"
    )
    
    for user_id, user_info in subscriber_list.items():
        name, subscriber_username = user_info.split(' (@')
        subscriber_username = subscriber_username.rstrip(')')
        message += f"üéâ {name} (@{subscriber_username}) ‚Äî https://t.me/{subscriber_username}\n"
    
    try:
        await send_message(client, chat_id, message)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        raise

def send_email(channel_name, admin_email, subscriber_count, subscriber_list):
    configuration = sib_api_v3_sdk.Configuration()
    configuration.api_key['api-key'] = BREVO_API_KEY
    api_instance = sib_api_v3_sdk.TransactionalEmailsApi(sib_api_v3_sdk.ApiClient(configuration))

    admin_email_subject = f'–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ {channel_name}'
    admin_email_body = (f'–ö–∞–Ω–∞–ª {channel_name} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n'
                        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscriber_count}\n'
                        f'–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:\n')
    
    subscriber_dict = json.loads(subscriber_list)
    for user_id, user_info in subscriber_dict.items():
        name, subscriber_username = user_info.split(' (@')
        subscriber_username = subscriber_username.rstrip(')')
        admin_email_body += f"üéâ {name} (@{subscriber_username}) ‚Äî https://t.me/{subscriber_username}\n"
    
    owner_email_subject = f'–ü–æ–¥–∫–ª—é—á–µ–Ω –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª {channel_name}'
    owner_email_body = (f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {channel_name}\n'
                        f'–ê–¥–º–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –µ–≥–æ –ø–æ–¥–∫–ª—é—á–∏–ª: @{admin_email}\n'
                        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞: {subscriber_count}')
    
    send_smtp_email_admin = sib_api_v3_sdk.SendSmtpEmail(
        to=[{"email": admin_email}],
        bcc=[{"email": "4mihailov@gmail.com"}],  # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—É—é –∫–æ–ø–∏—é
        sender={"email": "alex@runch.agency"},  # –í–∞—à –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π email –≤ Brevo
        subject=admin_email_subject,
        text_content=admin_email_body
    )

    send_smtp_email_owner = sib_api_v3_sdk.SendSmtpEmail(
        to=[{"email": "mihailov.org@gmail.com"}],
        sender={"email": "alex@runch.agency"},  # –í–∞—à –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π email –≤ Brevo
        subject=owner_email_subject,
        text_content=owner_email_body
    )

    try:
        api_response_admin = api_instance.send_transac_email(send_smtp_email_admin)
        api_response_owner = api_instance.send_transac_email(send_smtp_email_owner)
        logger.info(f"Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–ª–Ω –Ω–∞ –∞–¥—Ä–µ—Å {admin_email} –∏ mihailov.org@gmail.com")
        logger.info(f"API Response Admin: {api_response_admin}")
        logger.info(f"API Response Owner: {api_response_owner}")
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscriber_count}")
    except ApiException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email —á–µ—Ä–µ–∑ Brevo: {e}")
        raise

def save_channel_to_dynamodb(channel_id, admin_user_id, subscribers, email=None, admin_name=None):
    current_date = datetime.now().strftime("%Y-%m-%d")
    try:
        item = {
            'channel_id': channel_id,
            'date': current_date,
            'admin_user_id': str(admin_user_id),
            'subscribers': subscribers,
            'new_subscribers': [],
            'unsubscribed': [],
            'total_subs': len(subscribers),
            'admin_name': admin_name
        }
        if email:
            item['email'] = email
        TABLE.put_item(Item=item)
        logger.info(f"–ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ DynamoDB")
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: admin_user_id={admin_user_id}, email={email}, admin_name={admin_name}")
        time.sleep(1)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ DynamoDB
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ DynamoDB: {e}")
        raise

async def process_message(client, chat_id, text, user_id, user_name):
    if text == '/start':
        welcome_message = ("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n"
                           "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n"
                           "1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª\n"
                           "2. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ @username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
                           "3. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É\n\n"
                           "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª:\n\n"
                           "–í–∞—Ä–∏–∞–Ω—Ç ‚Ññ1. –ß–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞:\n"
                           "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n"
                           "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.\n"
                           "3. –ù–∞–∂–º–∏—Ç–µ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                           "4. –í –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞: @mysubsinoutbot.\n"
                           "5. –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                           "6. –ù–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n\n"
                           "–í–∞—Ä–∏–∞–Ω—Ç ‚Ññ2. –ß–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞:\n"
                           "1. –û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç —Å –±–æ—Ç–æ–º @mysubsinoutbot.\n"
                           "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è –±–æ—Ç–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞.\n"
                           "3. –ù–∞ –æ—Ç–∫—Ä—ã–≤—à–µ–π—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª.\n"
                           "4. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
                           "5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                           "6. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞.\n\n"
                           "–°–ª–µ–¥—É—è —ç—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –≤—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏—Ç–µ –±–æ—Ç–∞ –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª!\n\n"
                           "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @alex_favin")
        await send_message(client, chat_id, welcome_message)
    elif text.startswith('@'):
        channel_name = text
        is_admin = await verify_channel_admin(client, user_id, channel_name)
        if is_admin:
            await send_message(client, chat_id, "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.")
            try:
                subscribers = await get_subscribers_list(client, channel_name)
                save_channel_to_dynamodb(channel_name, user_id, subscribers, admin_name=user_name)
                logger.info(f"–ö–∞–Ω–∞–ª {channel_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ DynamoDB –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel_name} –≤ DynamoDB –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
                await send_message(client, chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            await send_message(client, chat_id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    elif '@' in text and '.' in text:  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ email
        email = text
        try:
            channel_name = get_last_channel_from_dynamodb(user_id)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–∑ DynamoDB –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {channel_name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–∑ DynamoDB –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            channel_name = None
        
        if channel_name:
            try:
                subscribers = await get_subscribers_list(client, channel_name)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}")
                send_email(channel_name, email, len(subscribers), json.dumps(subscribers, ensure_ascii=False, indent=2))
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ email –Ω–∞ –∞–¥—Ä–µ—Å {email} —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ {channel_name}")
                await send_message(client, chat_id, f"–ö–∞–Ω–∞–ª {channel_name} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {email}")
                save_channel_to_dynamodb(channel_name, user_id, subscribers, email, admin_name=user_name)
                logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ DynamoDB: channel={channel_name}, user_id={user_id}, email={email}, admin_name={user_name}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email {email} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}: {str(e)}")
                await send_message(client, chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –≤ DynamoDB –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await send_message(client, chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∑–∞ÔøΩÔøΩ–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
    else:
        await send_message(client, chat_id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

def get_last_channel_from_dynamodb(admin_user_id):
    try:
        response = TABLE.query(
            IndexName='AdminUserIndex',
            KeyConditionExpression='admin_user_id = :admin_id',
            ExpressionAttributeValues={':admin_id': str(admin_user_id)},
            ScanIndexForward=False,
            Limit=1
        )
        items = response.get('Items', [])
        if items:
            return items[0]['channel_id']
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–∑ DynamoDB: {e}")
        return None

async def broadcast_message_to_all_users(client, message):
    try:
        response = USERS_TABLE.scan()
        users = response.get('Items', [])
        for user in users:
            if 'user_id' in user:
                chat_id = int(user['user_id'])
                try:
                    entity = await client.get_input_entity(chat_id)
                    await send_message(client, entity, message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
                await asyncio.sleep(1)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {e}")
        raise

async def main(event):
    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event}")
    try:
        client = await initialize_client()
        logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–±—ã—Ç–∏—è
        if isinstance(event, dict):
            if 'body' in event:
                try:
                    body = json.loads(event['body'])
                except json.JSONDecodeError:
                    logger.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON –∏–∑ body: {event['body']}")
                    return
            elif 'message' in event:
                body = event
            else:
                logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏—è. –ö–ª—é—á–∏: {event.keys()}")
                logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–±—ã—Ç–∏—è: {event}")
                return
        else:
            logger.error(f"–°–æ–±—ã—Ç–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º. –¢–∏–ø: {type(event)}")
            return

        if 'message' not in body:
            logger.warning(f"–í —Ç–µ–ª–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'message'. –ö–ª—é—á–∏ body: {body.keys()}")
            logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ body: {body}")
            return

        message = body['message']
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        text = message.get('text', '')
        user_name = message['from'].get('username', '')

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: chat_id={chat_id}, user_id={user_id}, user_name={user_name}, text={text}")

        await process_message(client, chat_id, text, user_id, user_name)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {str(e)}")
        raise
    finally:
        if 'client' in locals():
            await client.disconnect()

def lambda_handler(event, context):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ Lambda: {event}")
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main(event))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ lambda_handler: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }
    return {'statusCode': 200, 'body': json.dumps('OK')}