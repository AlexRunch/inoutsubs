import json
import boto3
import asyncio
import os
from telethon import TelegramClient
from telethon.sessions import MemorySession
from datetime import datetime
import logging
import sib_api_v3_sdk
from sib_api_v3_sdk.rest import ApiException

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ DEBUG   (—ç—Ç–æ –º–æ–π–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram API
API_ID = 24502638
API_HASH = '751d5f310032a2f2b1ec888bd5fc7fcb'
BOT_TOKEN = '7512734081:AAGVNe3SGMdY1AnaJwu6_mN4bKTxp3Z7hJs'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DynamoDB –∏ Brevo
DYNAMODB = boto3.resource('dynamodb', region_name='eu-north-1')
TABLE = DYNAMODB.Table('telegram-subscribers-new')
BREVO_API_KEY = os.getenv('BREVO_API_KEY')  # –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

if not BREVO_API_KEY:
    error_message = "BREVO_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
    logger.error(error_message)
    raise ValueError(error_message.encode('utf-8'))

async def get_subscribers_list(client, channel):
    try:
        channel_entity = await client.get_entity(channel)
        participants = await client.get_participants(channel_entity)
        subscribers = {str(participant.id): f'{participant.first_name or ""} {participant.last_name or ""} (@{participant.username or "N/A"})'
                       for participant in participants}
        return subscribers
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
        raise

def send_email(channel_name, new_subscribers, unsubscribed, recipient_email):
    configuration = sib_api_v3_sdk.Configuration()
    configuration.api_key['api-key'] = BREVO_API_KEY
    api_instance = sib_api_v3_sdk.TransactionalEmailsApi(sib_api_v3_sdk.ApiClient(configuration))

    subject = f"{channel_name} –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö"
    headline = "–ü—Ä–∏–≤–µ—Ç üëã  –ü—Ä–∏–Ω–µ—Å —Ç–µ–±–µ –∏–Ω—Ñ—É –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"
    
    text_content = ""
    if new_subscribers:
        text_content += "–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å:\n\n"
        for user_id, user_info in new_subscribers.items():
            name, username = user_info.rsplit('@', 1)
            username = username.strip('()')
            text_content += f"üéâ {name.strip()} (@{username}) ‚Äî https://t.me/{username}\n\n"
        text_content += "\n"
    
    if unsubscribed:
        text_content += "–û—Ç–ø–∏—Å–∞–ª–∏—Å—å:\n\n"
        for user_id, user_info in unsubscribed.items():
            name, username = user_info.rsplit('@', 1)
            username = username.strip('()')
            text_content += f"üò¢ {name.strip()} (@{username}) ‚Äî https://t.me/{username}\n\n"

    params = {
        "HEADLINE": headline,
        "TEXT": text_content
    }

    send_smtp_email = sib_api_v3_sdk.SendSmtpEmail(
        to=[{"email": recipient_email}],
        template_id=18,
        params=params,
        subject=subject
    )

    try:
        api_response = api_instance.send_transac_email(send_smtp_email)
        logger.info(f"Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–¥—Ä–µ—Å {recipient_email}")
        logger.info(f"API Response: {api_response}")
    except ApiException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –Ω–∞ –∞–¥—Ä–µ—Å {recipient_email}: {e}")
        raise

def mask_email(email):
    parts = email.split('@')
    username = parts[0]
    domain = parts[1]
    masked_username = username[:3] + '*' * (len(username) - 3)
    masked_domain = domain[0] + '*' * (len(domain.split('.')[0]) - 1) + '.' + domain.split('.')[-1]
    return f"{masked_username}@{masked_domain}"

async def process_channel(client, channel_data):
    try:
        channel_name = channel_data['channel_id']
        date = channel_data['date']
        admin_email = channel_data.get('email')
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞: {channel_name}, –¥–∞—Ç–∞: {date}, email: {mask_email(admin_email)}")
        
        if not admin_email or admin_email == 'no_email_provided@example.com':
            logger.error(f"–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}")
            return ("no_email", channel_name)
        
        previous_subscribers = channel_data.get('subscribers', '{}')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if isinstance(previous_subscribers, dict):
            previous_subscribers = json.dumps(previous_subscribers)
        
        previous_subscribers = json.loads(previous_subscribers)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
        current_subscribers = await get_subscribers_list(client, channel_name)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –æ—Ç–ø–∏—Å–∞–≤—à–∏—Ö—è
        new_subscribers = {key: value for key, value in current_subscribers.items() if key not in previous_subscribers}
        unsubscribed = {key: value for key, value in previous_subscribers.items() if key not in current_subscribers}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö
        if new_subscribers or unsubscribed:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞
            send_email(channel_name, new_subscribers, unsubscribed, admin_email)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            logger.info(f"–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –∫–∞–Ω–∞–ª {channel_name}, –∞–¥–º–∏–Ω {mask_email(admin_email)}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ DynamoDB
            TABLE.update_item(
                Key={'channel_id': channel_name, 'date': date},
                UpdateExpression="set subscribers = :s, last_update = :u",
                ExpressionAttributeValues={
                    ':s': json.dumps(current_subscribers, ensure_ascii=False),
                    ':u': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
            )
            logger.info(f"–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ DynamoDB")
            return ("updated", channel_name)
        else:
            logger.info(f"–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}, email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return ("not_updated", channel_name)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ {channel_name}: {e}")
        return ("error", channel_name)

async def main():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MemorySession –≤–º–µ—Å—Ç–æ SQLite –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Å—Ä–µ–¥–µ Lambda
        client = TelegramClient(MemorySession(), API_ID, API_HASH)
        await client.start(bot_token=BOT_TOKEN)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ DynamoDB
        response = TABLE.scan()
        channels = response['Items']
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        for channel in channels:
            logger.info(f"–î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞: {channel['channel_id']} - {mask_email(channel.get('email', 'no_email_provided@example.com'))}")
        
        channels_processed = 0
        channels_updated = 0
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        tasks = [process_channel(client, channel_data) for channel_data in channels if 'channel_id' in channel_data and 'date' in channel_data]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        for result in results:
            channels_processed += 1
            if isinstance(result, tuple) and result[0] == "updated":
                channels_updated += 1
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {channels_processed}")
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã email): {channels_updated}")
        
        await client.disconnect()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}")
        raise

def lambda_handler(event, context):
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
        return {'statusCode': 200, 'body': '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ lambda_handler: {e}")
        return {'statusCode': 500, 'body': f'–û—à–∏–±–∫–∞: {e}'.encode('utf-8')}