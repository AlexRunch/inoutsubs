import json
import boto3
from telethon import TelegramClient
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram API
api_id = 24502638  # –í–∞—à api_id
api_hash = '751d5f310032a2f2b1ec888bd5fc7fcb'  # –í–∞—à api_hash
bot_token = '7512734081:AAGVNe3SGMdY1AnaJwu6_mN4bKTxp3Z7hJs'  # –í–∞—à bot token
channel_name = '@alex_runch'  # –ò–º—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Amazon SES
sender_email = 'mihailov.org@gmail.com'
recipient_email = '4lokiam@gmail.com'
ses_client = boto3.client('ses', region_name='eu-north-1')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DynamoDB
dynamodb = boto3.resource('dynamodb', region_name='eu-north-1')
table = dynamodb.Table('telegram-subscribers')  # –ò–º—è –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã –≤ DynamoDB
partition_key = '@alex_runch'  # –£–∫–∞–∑–∞–Ω –≤–∞—à –∫–ª—é—á

def send_email(subject, body):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ Amazon SES
    response = ses_client.send_email(
        Source=sender_email,
        Destination={'ToAddresses': [recipient_email]},
        Message={
            'Subject': {'Data': subject},
            'Body': {'Text': {'Data': body}}
        }
    )
    return response

async def get_subscribers_list(client, channel):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
    channel_entity = await client.get_entity(channel)
    participants = await client.get_participants(channel_entity)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é str(participant.id)
    subscribers = {str(participant.username or participant.id): f'{participant.first_name or ""} {participant.last_name or ""} (@{participant.username or "N/A"})'
                   for participant in participants}
    
    return subscribers

def get_previous_subscribers():
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ DynamoDB
    response = table.get_item(Key={'@alex_runch': partition_key})  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –∫–ª—é—á @alex_runch
    return response.get('Item', {}).get('subscribers', {})

def update_subscribers_in_db(subscribers):
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö DynamoDB
    table.put_item(
        Item={
            '@alex_runch': partition_key,
            'subscribers': subscribers  # –ö–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∏
        }
    )

def lambda_handler(event, context):
    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ Telethon –≤ /tmp/ (—ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è AWS Lambda)
    session_file_path = '/tmp/bot_session'

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramClient —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º bot_token
    client = TelegramClient(session_file_path, api_id, api_hash).start(bot_token=bot_token)

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    with client:
        current_subscribers = client.loop.run_until_complete(get_subscribers_list(client, channel_name))

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ DynamoDB
    previous_subscribers = get_previous_subscribers()

    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –∏ –æ—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è
    new_subscribers = {key: value for key, value in current_subscribers.items() if key not in previous_subscribers}
    unsubscribed = {key: value for key, value in previous_subscribers.items() if key not in current_subscribers}

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ email —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º username –≤–º–µ—Å—Ç–æ ID, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    if new_subscribers or unsubscribed:
        email_subject = "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ Telegram"
        email_body = "‚úÖ *–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å:*\n" + \
                     "\n".join([f"üéâ {value} ‚Äî [–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å](https://t.me/{key})" for key, value in new_subscribers.items() if isinstance(key, str)]) + \
                     "\n\nüíî *–û—Ç–ø–∏—Å–∞–ª–∏—Å—å:*\n" + \
                     "\n".join([f"üò¢ {value} ‚Äî [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å](https://t.me/{key})" for key, value in unsubscribed.items() if isinstance(key, str)])
    else:
        email_subject = "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        email_body = "–ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ—Ç. –ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–ø–∏—Å–∞–ª—Å—è."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —á–µ—Ä–µ–∑ Amazon SES
    send_email(email_subject, email_body)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_subscribers_in_db(current_subscribers)

    return {
        'statusCode': 200,
        'body': json.dumps(f'Sent daily report with {len(new_subscribers)} new and {len(unsubscribed)} unsubscribed users')
    }
